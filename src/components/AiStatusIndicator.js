import React, { useState, useEffect } from 'react';
import { geminiApiService } from '../api/geminiApi';
import styles from '../styles/AiStatusIndicator.module.css';

function AiStatusIndicator() {
    const [aiStatus, setAiStatus] = useState('checking');
    const [showTooltip, setShowTooltip] = useState(false);

    useEffect(() => {
        const checkAiStatus = async () => {
            try {
                const status = await geminiApiService.checkStatus();
                setAiStatus(status.status);
            } catch (error) {
                console.error('AI status check failed:', error);
                setAiStatus('disconnected');
            }
        };
        
        checkAiStatus();
        
        // Ki·ªÉm tra l·∫°i m·ªói 30 gi√¢y
        const interval = setInterval(checkAiStatus, 30000);
        
        return () => clearInterval(interval);
    }, []);

    const getStatusInfo = () => {
        switch (aiStatus) {
            case 'connected':
                return {
                    icon: 'ü§ñ',
                    text: 'AI S·∫µn s√†ng',
                    color: '#28a745',
                    description: 'Tr·ª£ l√Ω AI ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng'
                };
            case 'checking':
                return {
                    icon: '‚è≥',
                    text: 'ƒêang ki·ªÉm tra...',
                    color: '#ffc107',
                    description: 'ƒêang ki·ªÉm tra k·∫øt n·ªëi AI'
                };
            case 'disconnected':
                return {
                    icon: '‚ùå',
                    text: 'AI T·∫°m ng∆∞ng',
                    color: '#dc3545',
                    description: 'Tr·ª£ l√Ω AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng'
                };
            default:
                return {
                    icon: '‚ùì',
                    text: 'Kh√¥ng x√°c ƒë·ªãnh',
                    color: '#6c757d',
                    description: 'Tr·∫°ng th√°i AI kh√¥ng x√°c ƒë·ªãnh'
                };
        }
    };

    const statusInfo = getStatusInfo();

    return (
        <div 
            className={styles.container}
            onMouseEnter={() => setShowTooltip(true)}
            onMouseLeave={() => setShowTooltip(false)}
        >
            <div 
                className={styles.indicator}
                style={{ borderColor: statusInfo.color }}
            >
                <span className={styles.icon}>{statusInfo.icon}</span>
                <span className={styles.text}>{statusInfo.text}</span>
            </div>
            
            {showTooltip && (
                <div className={styles.tooltip}>
                    <div className={styles.tooltipHeader}>
                        <span className={styles.tooltipIcon}>{statusInfo.icon}</span>
                        <span className={styles.tooltipTitle}>Tr·∫°ng th√°i AI</span>
                    </div>
                    <p className={styles.tooltipDescription}>
                        {statusInfo.description}
                    </p>
                    <div className={styles.tooltipFooter}>
                        <small>Gemini 2.5 Flash</small>
                    </div>
                </div>
            )}
        </div>
    );
}

export default AiStatusIndicator;

